const API_URL = "https://dark-market-backend.onrender.com";

// ========================== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==========================

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
async function loadProfile() {
  try {
    const token = localStorage.getItem("token");
    if (!token) return;

    const res = await fetch(`${API_URL}/profile`, {
      headers: { "Authorization": `Bearer ${token}` }
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

    const data = await res.json();

    document.getElementById("profile-username").textContent = data.username;
    document.getElementById("profile-role").textContent = data.role;
    document.getElementById("profile-about").textContent = data.about || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    if (data.avatarUrl) {
      document.getElementById("profile-avatar").src = `${API_URL}/${data.avatarUrl}`;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –∏ –Ω–∏–∫ –≤ localStorage
    localStorage.setItem("role", data.role);
    localStorage.setItem("username", data.username);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å–ª–∏ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    if (data.role === "admin") {
      document.getElementById("admin-panel").style.display = "block";
      document.getElementById("crown").innerHTML = "üëë";
    }
  } catch (err) {
    console.error(err);
    logout();
  }
}

// –í—ã—Ö–æ–¥
function logout() {
  localStorage.removeItem("token");
  localStorage.removeItem("role");
  localStorage.removeItem("username");
  window.location.href = "index.html";
}

// ========================== –ê–í–ê–¢–ê–† ==========================

async function uploadAvatar(file) {
  if (!file) return alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!");
  
  const token = localStorage.getItem("token");
  const formData = new FormData();
  formData.append("avatar", file);

  try {
    const res = await fetch(`${API_URL}/upload-avatar`, {
      method: "POST",
      headers: { "Authorization": `Bearer ${token}` },
      body: formData
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞");

    const data = await res.json();
    document.getElementById("profile-avatar").src = `${API_URL}/${data.path}`;
    alert("–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!");
  } catch (err) {
    console.error(err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä");
  }
}

// ========================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –û –°–ï–ë–ï ==========================

async function updateAbout(about) {
  const token = localStorage.getItem("token");
  try {
    const res = await fetch(`${API_URL}/update-about`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
      body: JSON.stringify({ about })
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");

    alert("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
    document.getElementById("profile-about").textContent = about;
  } catch (err) {
    console.error(err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
  }
}

// ========================== –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ==========================

async function uploadFile(file, section) {
  if (!file) return alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!");

  const token = localStorage.getItem("token");
  const formData = new FormData();
  formData.append("file", file);
  formData.append("section", section);

  const progressBar = document.getElementById("upload-progress");
  progressBar.style.display = "block";
  progressBar.value = 0;

  try {
    const xhr = new XMLHttpRequest();
    xhr.open("POST", `${API_URL}/upload`, true);
    xhr.setRequestHeader("Authorization", `Bearer ${token}`);

    xhr.upload.onprogress = (event) => {
      if (event.lengthComputable) {
        const percent = Math.round((event.loaded / event.total) * 100);
        progressBar.value = percent;
      }
    };

    xhr.onload = () => {
      if (xhr.status === 200) {
        alert("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
        loadGallery(section);
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞!");
      }
    };

    xhr.send(formData);
  } catch (err) {
    console.error(err);
    alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
  }
}

// ========================== –ì–ê–õ–ï–†–ï–Ø ==========================

async function loadGallery(section = "images") {
  try {
    const res = await fetch(`${API_URL}/files?section=${section}`);
    const files = await res.json();

    const gallery = document.getElementById("gallery");
    gallery.innerHTML = "";

    if (files.length === 0) {
      gallery.innerHTML = "<p>–§–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>";
      return;
    }

    files.forEach(file => {
      const card = document.createElement("div");
      card.className = "card";
      card.innerHTML = `
        <img src="${API_URL}/${file.path}" alt="${file.name}">
        <p>${file.name}</p>
        ${file.price > 0 
          ? `<button onclick="buyFile(${file.id})">–ö—É–ø–∏—Ç—å –∑–∞ ${file.price} $</button>` 
          : `<a href="${API_URL}/${file.path}" download>–°–∫–∞—á–∞—Ç—å</a>`}
      `;
      gallery.appendChild(card);
    });
  } catch (err) {
    console.error(err);
  }
}

// ========================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========================

async function blockUser(userId, reason) {
  const token = localStorage.getItem("token");
  try {
    const res = await fetch(`${API_URL}/block-user`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
      body: JSON.stringify({ userId, reason })
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");

    alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!");
  } catch (err) {
    console.error(err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}

async function blockApp(fileId) {
  const token = localStorage.getItem("token");
  try {
    const res = await fetch(`${API_URL}/block-app`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
      body: JSON.stringify({ fileId })
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");

    alert("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!");
  } catch (err) {
    console.error(err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
  }
}
