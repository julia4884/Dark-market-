const API_URL = "https://dark-market-backend.onrender.com"; 

document.addEventListener("DOMContentLoaded", () => {
  alert("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  (async () => {
    try {
      const res = await fetch(`${API_URL}/messages/cat`);
      if (res.ok) {
        const data = await res.json();
        console.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:", data);
      } else {
        console.warn("‚ö† –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –æ—à–∏–±–∫–æ–π:", res.status);
        alert("‚ö† –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–≤–µ—Ä—å Render.");
      }
    } catch (err) {
      console.warn("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–µ–∫–µ–Ω–¥–æ–º:", err);
      alert("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–µ–∫–µ–Ω–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å Render.");
    }
  })();
});

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã ===
const chatInput = document.getElementById("chat-input");
const chatForm = document.getElementById("chat-form");
const chatMessages = document.getElementById("chat-messages");
const stickerToggle = document.getElementById("sticker-toggle");
const stickerPanel = document.getElementById("sticker-panel");
const chatOverlay = document.getElementById("chat-overlay");

let currentChat = "global";
// === UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ===
function updateUI() {
  const token = localStorage.getItem("token");
  document.getElementById("auth-section").style.display = token ? "none" : "block";
  document.getElementById("logout-section").style.display = token ? "block" : "none";
}

// === –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ===
function initAuth() {
  const loginBtn = document.getElementById("login-btn");
  const registerBtn = document.getElementById("register-btn");
  const logoutBtn = document.getElementById("logout-btn");

  loginBtn?.addEventListener("click", async (e) => {
    e.preventDefault();
    const email = document.getElementById("login-email").value;
    const password = document.getElementById("login-password").value;

    try {
      const res = await fetch(`${API_URL}/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });
      const data = await res.json();
      if (data.token) {
        localStorage.setItem("token", data.token);
        alert("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
        location.reload();
      } else {
        alert("–û—à–∏–±–∫–∞: " + (data.error || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
      }
    } catch {
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  });

  registerBtn?.addEventListener("click", async (e) => {
    e.preventDefault();
    const username = document.getElementById("register-username").value;
    const email = document.getElementById("register-email").value;
    const password = document.getElementById("register-password").value;

    try {
      const res = await fetch(`${API_URL}/register`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, email, password }),
      });
      const data = await res.json();
      if (data.success) {
        alert("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
        location.reload();
      } else {
        alert("–û—à–∏–±–∫–∞: " + (data.error || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
      }
    } catch {
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  });

  logoutBtn?.addEventListener("click", () => {
    localStorage.removeItem("token");
    alert("üö™ –í—ã –≤—ã—à–ª–∏");
    location.reload();
  });
}
// === –ß–∞—Ç ===
async function loadChat() {
  try {
    const res = await fetch(`${API_URL}/chat/${currentChat}`, {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    });
    const data = await res.json();

    chatMessages.innerHTML = data.map(msg => `
      <div class="chat-msg ${msg.role}">
        <span class="user">${msg.username}</span>: 
        <span class="content">${msg.content}</span>
      </div>
    `).join("");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:", err);
  }
}

chatForm?.addEventListener("submit", async (e) => {
  e.preventDefault();
  const content = chatInput.value.trim();
  if (!content) return;

  try {
    const res = await fetch(`${API_URL}/chat/${currentChat}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify({ content }),
    });
    const data = await res.json();
    if (data.success) {
      chatInput.value = "";
      loadChat();
    } else {
      alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"));
    }
  } catch {
    alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
  }
});

setInterval(loadChat, 5000);

// === –°—Ç–∏–∫–µ—Ä—ã ===
async function loadStickers() {
  try {
    const res = await fetch(`${API_URL}/stickers`);
    const stickers = await res.json();
    if (!Array.isArray(stickers) || stickers.length === 0) return;

    stickerPanel.innerHTML = stickers.map(st =>
      `<img src="${API_URL}${st.url}" class="sticker" alt="${st.name}" title="${st.name}">`
    ).join("");

    for (const sticker of stickerPanel.querySelectorAll(".sticker")) {
      sticker.addEventListener("click", async () => {
        const stickerTag = `[sticker:${sticker.alt}]`;
        try {
          await fetch(`${API_URL}/chat/${currentChat}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
            body: JSON.stringify({ content: stickerTag }),
          });
          loadChat();
        } catch {
          alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞");
        }
      });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:", err);
  }
}

stickerToggle?.addEventListener("click", () => {
  if (stickerPanel.style.display === "block") {
    stickerPanel.style.display = "none";
    chatOverlay.style.display = "none";
  } else {
    stickerPanel.style.display = "block";
    chatOverlay.style.display = "block";
  }
});
chatOverlay?.addEventListener("click", () => {
  stickerPanel.style.display = "none";
  chatOverlay.style.display = "none";
});

// === –ö–æ—à–∫–∞ üêà‚Äç‚¨õ ===
function initCat() {
  const catWidget = document.getElementById("cat-widget");
  const contactFormContainer = document.getElementById("contact-form-container");
  const contactForm = document.getElementById("contact-form");
  const closeContact = document.getElementById("close-contact");

  catWidget?.addEventListener("click", () => {
    if (!contactFormContainer) return;
    contactFormContainer.style.display =
      contactFormContainer.style.display === "block" ? "none" : "block";
  });

  closeContact?.addEventListener("click", () => {
    if (contactFormContainer) contactFormContainer.style.display = "none";
  });

  contactForm?.addEventListener("submit", (e) => {
    e.preventDefault();
    const email = document.getElementById("contact-email").value.trim();
    const message = document.getElementById("contact-message").value.trim();
    if (!email || !message) return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");

    fetch(`${API_URL}/contact`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, message }),
    })
      .then((res) => res.json())
      .then((data) => {
        alert(data.success ? "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" : "–û—à–∏–±–∫–∞: " + data.error);
        if (data.success) contactFormContainer.style.display = "none";
      })
      .catch(() => alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
  });
}

// === –õ–µ—Ç—É—á–∞—è –º—ã—à—å ü¶á ===
function initBat() {
  const bat = document.getElementById("flying-bat");
  const batMsg = document.getElementById("bat-message");

  bat?.addEventListener("click", async () => {
    try {
      const res = await fetch(`${API_URL}/messages/bat`);
      const data = await res.json();
      batMsg.textContent = data.message || "–®—à—à... –Ø –º–æ–ª—á—É ü¶á";
      batMsg.style.display = "block";

      setTimeout(() => (batMsg.style.display = "none"), 4000);
    } catch {
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º—ã—à–∏");
    }
  });
 // === –ì–∞–ª–µ—Ä–µ—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ ===
const imagesGallery = [
  { id: 1, src: "images/pic1.jpg", title: "–¢—ë–º–Ω—ã–π –ª–µ—Å", desc: "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ç—å–º–∞ –∏ —Å–≤–µ—Ç –ª—É–Ω—ã." },
  { id: 2, src: "images/pic2.jpg", title: "–ö–æ—Å–º–æ—Å", desc: "–ù–µ–æ–Ω–æ–≤–∞—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞ üåå" },
  { id: 3, src: "images/pic3.jpg", title: "–í–µ–¥—å–º–∞", desc: "–°–∏–ª—É—ç—Ç—ã –º–∞–≥–∏–∏ –≤ –Ω–æ—á–∏." },
  { id: 4, src: "images/pic4.jpg", title: "–ó–∞–º–æ–∫", desc: "–î—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã –Ω–∞ —É—Ç—ë—Å–µ." }
];

async function loadImagesGallery() {
  const container = document.getElementById("images-gallery");
  if (!container) return;

  container.innerHTML = imagesGallery.map(img => `
    <div class="card" data-id="${img.id}">
      <img src="${img.src}" alt="${img.title}">
      <h3>${img.title}</h3>
      <p>${img.desc}</p>
      <button class="meow-btn">üêæ –ú—è—É–∫</button>
      <span class="like-count">0</span>
      <div class="comments">
        <textarea class="comment-input" placeholder="–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."></textarea>
        <button class="comment-btn">üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        <div class="comment-list"></div>
      </div>
    </div>
  `).join("");

  for (const fileCard of container.querySelectorAll(".card")) {
    const fileId = fileCard.dataset.id;
    const likeCount = fileCard.querySelector(".like-count");
    const btn = fileCard.querySelector(".meow-btn");
    const commentBtn = fileCard.querySelector(".comment-btn");
    const commentInput = fileCard.querySelector(".comment-input");
    const commentList = fileCard.querySelector(".comment-list");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∞–π–∫–∏
    try {
      const res = await fetch(`${API_URL}/files/${fileId}/likes`);
      const data = await res.json();
      likeCount.textContent = data.total || 0;
    } catch {
      likeCount.textContent = "‚ö†";
    }

    // –°—Ç–∞–≤–∏–º –ª–∞–π–∫
    btn.addEventListener("click", async () => {
      try {
        const res = await fetch(`${API_URL}/files/${fileId}/like`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        const data = await res.json();

        if (data.success) {
          const res2 = await fetch(`${API_URL}/files/${fileId}/likes`);
          const countData = await res2.json();
          likeCount.textContent = countData.total;
          btn.textContent = data.liked ? "üëçüèª –ú—è—É–∫" : "üêæ –ú—è—É–∫";
        } else {
          alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫"));
        }
      } catch {
        alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    async function loadComments() {
      try {
        const res = await fetch(`${API_URL}/files/${fileId}/comments`);
        const comments = await res.json();
        commentList.innerHTML = comments.map(c =>
          `<div class="comment"><b>${c.username}</b>: ${c.content}</div>`
        ).join("");
      } catch {
        commentList.innerHTML = "<div class='comment'>‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>";
      }
    }
    loadComments();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    commentBtn.addEventListener("click", async () => {
      const content = commentInput.value.trim();
      if (!content) return alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");

      try {
        const res = await fetch(`${API_URL}/files/${fileId}/comments`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
          body: JSON.stringify({ content }),
        });
        const data = await res.json();

        if (data.success) {
          commentInput.value = "";
          loadComments();
        } else {
          alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"));
        }
      } catch {
        alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    });
  }
}
// === PayPal –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ===
function initPayPal() {
  const donateBtn = document.getElementById("donate-btn");
  if (!donateBtn) return;

  donateBtn.addEventListener("click", async () => {
    try {
      const amount = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ EUR:");
      if (!amount || isNaN(amount)) {
        return alert("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.");
      }

      const res = await fetch(`${API_URL}/create-order`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: JSON.stringify({ amount }),
      });

      const data = await res.json();
      if (!res.ok || !data.id) {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞");
      }

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ PayPal
      const approveLink = data.links.find(link => link.rel === "approve");
      if (approveLink) {
        window.location.href = approveLink.href;
      } else {
        alert("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É PayPal.");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ PayPal:", err);
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ PayPal. –ü—Ä–æ–≤–µ—Ä—å —Å–µ—Ä–≤–µ—Ä.");
    }
  }
// === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π ===
document.addEventListener("DOMContentLoaded", () => {
  alert("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
  updateUI();
  loadChat();
  loadStickers();
  initCat();
  initBat();
  loadImagesGallery();
  initPayPal();
});                            
