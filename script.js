const API_URL = "https://dark-market-backend.onrender.com"; // —É–∫–∞–∂–∏ —Å–≤–æ–π –±–µ–∫–µ–Ω–¥ Render

document.addEventListener("DOMContentLoaded", () => {
  alert("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  (async () => {
    try {
      const res = await fetch(`${API_URL}/messages/cat`);
      if (res.ok) {
        const data = await res.json();
        console.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:", data);
      } else {
        console.warn("‚ö† –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π:", res.status);
        alert("‚ö† –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π");
      }
    } catch (err) {
      console.warn("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–µ–∫–µ–Ω–¥–æ–º:", err);
      alert("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–µ–∫–µ–Ω–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å Render.");
    }
  })();

  initAuth();
  initCatAndBat();
  initChat();
  loadImagesGallery();
});

// === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
function initAuth() {
  const loginBtn = document.getElementById("login-btn");
  const registerBtn = document.getElementById("register-btn");

  loginBtn?.addEventListener("click", async (e) => {
    e.preventDefault();
    const email = document.getElementById("login-email").value.trim();
    const password = document.getElementById("login-password").value.trim();

    try {
      const res = await fetch(`${API_URL}/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });
      const data = await res.json();
      if (data.token) {
        localStorage.setItem("token", data.token);
        alert("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
        location.reload();
      } else {
        alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
      }
    } catch {
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  });

  registerBtn?.addEventListener("click", async (e) => {
    e.preventDefault();
    const username = document.getElementById("register-username").value.trim();
    const email = document.getElementById("register-email").value.trim();
    const password = document.getElementById("register-password").value.trim();

    try {
      const res = await fetch(`${API_URL}/register`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, email, password }),
      });
      const data = await res.json();
      if (data.success) {
        alert("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.");
      } else {
        alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
      }
    } catch {
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  });
  }
// === –ö–æ—à–∫–∞ üêà‚Äç‚¨õ ===
function initCatAndBat() {
  const catWidget = document.getElementById("cat-widget");
  const contactFormContainer = document.getElementById("contact-form-container");
  const contactForm = document.getElementById("contact-form");
  const closeContact = document.getElementById("close-contact");

  catWidget?.addEventListener("click", () => {
    if (!contactFormContainer) return;
    contactFormContainer.style.display =
      contactFormContainer.style.display === "block" ? "none" : "block";
  });

  closeContact?.addEventListener("click", () => {
    if (contactFormContainer) contactFormContainer.style.display = "none";
  });

  contactForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const email = document.getElementById("contact-email").value.trim();
    const message = document.getElementById("contact-message").value.trim();
    if (!email || !message) return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");

    try {
      const res = await fetch(`${API_URL}/contact`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, message }),
      });
      const data = await res.json();
      alert(data.success ? "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" : "–û—à–∏–±–∫–∞: " + data.error);
      if (data.success) contactFormContainer.style.display = "none";
    } catch {
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  });
}

// === –õ–µ—Ç—É—á–∞—è –º—ã—à—å ü¶á ===
async function loadBatMessage() {
  try {
    const res = await fetch(`${API_URL}/messages/bat`);
    const data = await res.json();
    const batMessage = document.getElementById("bat-message");
    if (batMessage) {
      batMessage.textContent = data.message;
      batMessage.style.display = "block";
      setTimeout(() => (batMessage.style.display = "none"), 5000);
    }
  } catch {
    console.warn("‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–µ—Ç—É—á–µ–π –º—ã—à–∏");
  }
}
document.getElementById("flying-bat")?.addEventListener("click", loadBatMessage);

// === –ß–∞—Ç ===
function initChat() {
  const chatForm = document.getElementById("chat-form");
  const chatInput = document.getElementById("chat-input");
  const chatMessages = document.getElementById("chat-messages");

  async function loadChat() {
    try {
      const res = await fetch(`${API_URL}/chat/global`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token") || ""}`,
        },
      });
      if (!res.ok) return;
      const data = await res.json();
      chatMessages.innerHTML = data
        .map((msg) => `<p><b>${msg.username}</b>: ${msg.content}</p>`)
        .join("");
    } catch {
      console.warn("‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞");
    }
  }

  chatForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    if (!chatInput.value.trim()) return;

    try {
      const res = await fetch(`${API_URL}/chat/global`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token") || ""}`,
        },
        body: JSON.stringify({ content: chatInput.value }),
      });
      const data = await res.json();
      if (data.success) {
        chatInput.value = "";
        loadChat();
      } else {
        alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"));
      }
    } catch {
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  });

  setInterval(loadChat, 5000);
  loadChat();
}
// === –°—Ç–∏–∫–µ—Ä—ã ===
async function loadStickers() {
  try {
    const panel = document.getElementById("sticker-panel");
    if (!panel) return;

    const res = await fetch(`${API_URL}/stickers`);
    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤");
    const stickers = await res.json();

    panel.innerHTML = stickers
      .map((s) => `<img src="${API_URL}${s.url}" alt="${s.name}" class="sticker">`)
      .join("");

    panel.querySelectorAll(".sticker").forEach((sticker) => {
      sticker.addEventListener("click", async () => {
        const stickerTag = `[sticker:${sticker.alt}]`;
        try {
          await fetch(`${API_URL}/chat/global`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token") || ""}`,
            },
            body: JSON.stringify({ content: stickerTag }),
          });
        } catch {
          alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞");
        }
      });
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:", err);
  }
}
document.getElementById("sticker-toggle")?.addEventListener("click", () => {
  const panel = document.getElementById("sticker-panel");
  if (panel) {
    panel.style.display = panel.style.display === "block" ? "none" : "block";
  }
});
loadStickers();

// === –ì–∞–ª–µ—Ä–µ—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ + –ª–∞–π–∫–∏ ===
const imagesGallery = [
  { id: 1, src: "images/pic1.jpg", title: "–¢—ë–º–Ω—ã–π –ª–µ—Å", desc: "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ç—å–º–∞ –∏ —Å–≤–µ—Ç –ª—É–Ω—ã." },
  { id: 2, src: "images/pic2.jpg", title: "–ö–æ—Å–º–æ—Å", desc: "–ù–µ–æ–Ω–æ–≤–∞—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞ üåå" },
  { id: 3, src: "images/pic3.jpg", title: "–í–µ–¥—å–º–∞", desc: "–°–∏–ª—É—ç—Ç—ã –º–∞–≥–∏–∏ –≤ –Ω–æ—á–∏." },
  { id: 4, src: "images/pic4.jpg", title: "–ó–∞–º–æ–∫", desc: "–î—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã –Ω–∞ —É—Ç—ë—Å–µ." },
];

async function loadImagesGallery() {
  const container = document.getElementById("images-gallery");
  if (!container) return;

  container.innerHTML = imagesGallery
    .map(
      (img) => `
    <div class="card" data-id="${img.id}">
      <img src="${img.src}" alt="${img.title}">
      <h3>${img.title}</h3>
      <p>${img.desc}</p>
      <button class="meow-btn">üêæ –ú—è—É–∫</button>
      <span class="like-count">0</span>
    </div>
  `
    )
    .join("");

  for (const fileCard of container.querySelectorAll(".card")) {
    const fileId = fileCard.dataset.id;
    const likeCount = fileCard.querySelector(".like-count");
    const btn = fileCard.querySelector(".meow-btn");

    try {
      const res = await fetch(`${API_URL}/files/${fileId}/likes`);
      const data = await res.json();
      likeCount.textContent = data.total || 0;

      const checkRes = await fetch(`${API_URL}/files/${fileId}/liked`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token") || ""}` },
      });
      if (checkRes.ok) {
        const checkData = await checkRes.json();
        if (checkData.liked) {
          btn.textContent = "üëçüèª –ú—è—É–∫";
        }
      }
    } catch {
      likeCount.textContent = "‚ö†";
    }

    btn.addEventListener("click", async () => {
      try {
        const res = await fetch(`${API_URL}/files/${fileId}/like`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token") || ""}`,
          },
        });
        const data = await res.json();

        if (data.success) {
          const res2 = await fetch(`${API_URL}/files/${fileId}/likes`);
          const countData = await res2.json();
          likeCount.textContent = countData.total;

          btn.textContent = data.liked ? "üëçüèª –ú—è—É–∫" : "üêæ –ú—è—É–∫";
        } else {
          alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫"));
        }
      } catch {
        alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    });
  }
}
// === –°—Ç–∏–∫–µ—Ä—ã ü¶â ===
function initStickers() {
  const stickerToggle = document.getElementById("sticker-toggle");
  const stickerPanel = document.getElementById("sticker-panel");
  const chatOverlay = document.getElementById("chat-overlay");

  if (!stickerToggle || !stickerPanel || !chatOverlay) return;

  // –û—Ç–∫—Ä—ã—Ç–∏–µ / –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
  stickerToggle.addEventListener("click", () => {
    const isVisible = stickerPanel.style.display === "block";
    stickerPanel.style.display = isVisible ? "none" : "block";
    chatOverlay.style.display = isVisible ? "none" : "block";
  });

  chatOverlay.addEventListener("click", () => {
    stickerPanel.style.display = "none";
    chatOverlay.style.display = "none";
  });

  // –ü–æ–¥–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
  fetch(`${API_URL}/stickers`)
    .then((res) => res.json())
    .then((stickers) => {
      if (!Array.isArray(stickers)) return;
      stickerPanel.innerHTML = stickers
        .map(
          (sticker) =>
            `<img src="${API_URL}${sticker.url}" 
                  alt="${sticker.name}" 
                  class="sticker-img">`
        )
        .join("");

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —á–∞—Ç
      stickerPanel.querySelectorAll(".sticker-img").forEach((img) => {
        img.addEventListener("click", async () => {
          try {
            const stickerTag = `[sticker:${img.alt}]`;
            await fetch(`${API_URL}/chat/${currentChat}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
              body: JSON.stringify({ content: stickerTag }),
            });
            loadChat();
          } catch {
            alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞");
          }
        });
      });
    })
    .catch(() => console.warn("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã"));
}

// === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π ===
document.addEventListener("DOMContentLoaded", () => {
  alert("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");

  updateUI();        // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ UI
  initAuth();        // –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  initCatAndBat();   // –∫–æ—à–∫–∞ üêà‚Äç‚¨õ –∏ –ª–µ—Ç—É—á–∞—è –º—ã—à—å ü¶á
  initStickers();    // —Å–æ–≤–∞‚Äë—Å—Ç–∏–∫–µ—Ä ü¶â
  loadImagesGallery(); // –≥–∞–ª–µ—Ä–µ—è —Å –ª–∞–π–∫–∞–º–∏

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
  setInterval(loadChat, 5000);
  loadChat();
});
// === –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ===
function applyMobileAdjustments() {
  const isMobile = window.innerWidth <= 768; // <=768px —Å—á–∏—Ç–∞–µ–º –º–æ–±–∏–ª–∫–æ–π
  const chatInput = document.getElementById("chat-input");
  const stickerPanel = document.getElementById("sticker-panel");
  const catWidget = document.getElementById("cat-widget");

  if (isMobile) {
    console.log("üì± –ú–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");

    // –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞
    if (chatInput) chatInput.style.fontSize = "14px";

    // –ü–∞–Ω–µ–ª—å —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–µ–ª–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π
    if (stickerPanel) {
      stickerPanel.style.position = "fixed";
      stickerPanel.style.bottom = "0";
      stickerPanel.style.left = "0";
      stickerPanel.style.width = "100%";
      stickerPanel.style.maxHeight = "40%";
      stickerPanel.style.overflowY = "auto";
    }

    // –ö–æ—à–∫–∞ (–ø–µ—Ä–µ–Ω–æ—Å–∏–º –∫–Ω–æ–ø–∫—É –≤—ã—à–µ, –µ—Å–ª–∏ –º–µ—à–∞–µ—Ç)
    if (catWidget) {
      catWidget.style.position = "fixed";
      catWidget.style.bottom = "60px";
      catWidget.style.right = "20px";
    }
  } else {
    console.log("üíª –î–µ—Å–∫—Ç–æ–ø–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç
    if (chatInput) chatInput.style.fontSize = "";
    if (stickerPanel) {
      stickerPanel.style = "";
    }
    if (catWidget) {
      catWidget.style = "";
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
document.addEventListener("DOMContentLoaded", applyMobileAdjustments);
window.addEventListener("resize", applyMobileAdjustments);
