alert("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!");
// === –ö–æ–Ω—Ñ–∏–≥ ===
const API_URL = "https://dark-market-backend.onrender.com";
// === –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
(async () => {
  try {
    const res = await fetch(`${API_URL}/messages/cat`, {
      headers: { "Authorization": `Bearer ${localStorage.getItem("token") || ""}` }
    });
    if (!res.ok) {
      const text = await res.text();
      alert(`‚ö†Ô∏è Render –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π!\n–°—Ç–∞—Ç—É—Å: ${res.status}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);
    } else {
      const data = await res.json();
      alert("‚úÖ Render –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!\n–î–∞–Ω–Ω—ã–µ: " + JSON.stringify(data));
    }
  } catch (err) {
    alert("‚ùå Render –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: " + err.message);
  }
})();

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ===
document.addEventListener("DOMContentLoaded", () => {
  alert("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å API
  (async () => {
    try {
      const res = await fetch(`${API_URL}/messages/cat`);
      if (res.ok) {
        console.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω");
      } else {
        console.warn("‚ö† –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π:", res.status);
      }
    } catch (err) {
      console.error("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–µ–∫–µ–Ω–¥–æ–º:", err);
    }
  })();

  updateUI();
});

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
function updateUI() {
  const token = localStorage.getItem("token");
  const role = localStorage.getItem("role");

  const authSection = document.getElementById("auth-section");
  const logoutSection = document.getElementById("logout-section");
  const profileInfo = document.getElementById("profile-info");

  if (token) {
    authSection.style.display = "none";
    logoutSection.style.display = "block";
    profileInfo.textContent = `–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: ${localStorage.getItem("username") || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}`;
  } else {
    authSection.style.display = "block";
    logoutSection.style.display = "none";
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É
  if (role === "admin" && window.location.pathname.endsWith("admin.html")) {
    console.log("üëë –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }
}

// === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
function initAuth() {
  const loginBtn = document.getElementById("login-btn");
  const registerBtn = document.getElementById("register-btn");
  const logoutBtn = document.getElementById("logout-btn");

  // –í—Ö–æ–¥
  loginBtn?.addEventListener("click", async (e) => {
    e.preventDefault();
    const email = document.getElementById("login-email").value;
    const password = document.getElementById("login-password").value;

    try {
      const res = await fetch(`${API_URL}/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });

      const data = await res.json();
      if (data.token) {
  localStorage.setItem("token", data.token);

  if (data.role) {
    localStorage.setItem("role", data.role); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
  }

  if (data.username) {
    localStorage.setItem("username", data.username);
  }

  alert("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!\n–†–æ–ª—å: " + (data.role || "‚ùå –Ω–µ—Ç"));
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
if (data.role === "admin") {
    window.location.href = "/admin.html";
} else if (data.role === "developer") {
    window.location.href = "/developer.html";
} else {
    window.location.href = "/cabinet.html";
}
} else {
  alert("–û—à–∏–±–∫–∞: " + (data.error || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", err);
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  registerBtn?.addEventListener("click", async (e) => {
    e.preventDefault();
    const username = document.getElementById("register-username").value;
    const email = document.getElementById("register-email").value;
    const password = document.getElementById("register-password").value;

    try {
      const res = await fetch(`${API_URL}/register`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, email, password }),
      });

      const data = await res.json();
      if (data.success) {
        alert("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
        location.reload();
      } else {
        alert("–û—à–∏–±–∫–∞: " + (data.error || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
      alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
  });

  // –í—ã—Ö–æ–¥
  logoutBtn?.addEventListener("click", () => {
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    localStorage.removeItem("username");
    alert("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞");
    location.reload();
  });
}

initAuth();
// === –ß–∞—Ç ===
const chatForm = document.getElementById("chat-form");
const chatInput = document.getElementById("chat-input");
const chatMessages = document.getElementById("chat-messages");

async function loadChat() {
  try {
    const res = await fetch(`${API_URL}/chat/global`, {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    });
    const data = await res.json();

    chatMessages.innerHTML = data
      .map(msg => `
        <div class="chat-message ${msg.username === localStorage.getItem("username") ? "me" : ""}">
          <strong>${msg.username}:</strong> ${msg.content}
        </div>
      `)
      .join("");
  } catch {
    chatMessages.innerHTML = "<p>‚ö† –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>";
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
chatForm?.addEventListener("submit", async (e) => {
  e.preventDefault();
  const content = chatInput.value.trim();
  if (!content) return;

  try {
    const res = await fetch(`${API_URL}/chat/global`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify({ content }),
    });

    const data = await res.json();
    if (data.success) {
      chatInput.value = "";
      loadChat();
    } else {
      alert("–û—à–∏–±–∫–∞: " + (data.error || "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"));
    }
  } catch {
    alert("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
  }
});

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
setInterval(loadChat, 5000);
loadChat();

// === –ü–∞–Ω–µ–ª—å —Å—Ç–∏–∫–µ—Ä–æ–≤ ===
const stickerToggle = document.getElementById("sticker-toggle");
const stickerPanel = document.getElementById("sticker-panel");

async function loadStickers() {
  try {
    const res = await fetch(`${API_URL}/stickers`);
    const stickers = await res.json();

    stickerPanel.innerHTML = stickers
      .map(sticker => `<span class="sticker">${sticker.icon}</span>`)
      .join("");

    for (const stickerEl of stickerPanel.querySelectorAll(".sticker")) {
      stickerEl.addEventListener("click", async () => {
        const stickerTag = stickerEl.textContent;

        try {
          await fetch(`${API_URL}/chat/global`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
            body: JSON.stringify({ content: stickerTag }),
          });
          loadChat();
        } catch {
          alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞");
        }
      });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:", err);
  }
}

stickerToggle?.addEventListener("click", () => {
  stickerPanel.style.display =
    stickerPanel.style.display === "block" ? "none" : "block";
  document.getElementById("chat-overlay").style.display =
    stickerPanel.style.display;
});

loadStickers();

// === –ü—ë—Ä—ã—à–∫–æ ü™∂ ===
const feather = document.createElement("div");
feather.id = "chat-feather";
feather.textContent = "ü™∂";
document.querySelector("#chat-form")?.appendChild(feather);

// –ª—ë–≥–∫–æ–µ –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ
setInterval(() => {
  feather.style.transform = "translateY(-5px)";
  setTimeout(() => (feather.style.transform = "translateY(0)"), 300);
}, 2000);

// === –°–æ–≤–∞ ü¶â ===
const owlButton = document.getElementById("sticker-toggle");
if (owlButton) {
  owlButton.textContent = "ü¶â –°—Ç–∏–∫–µ—Ä—ã";
  owlButton.classList.add("glow-owl"); // –≤ style.css –ø–æ–¥—Å–≤–µ—Ç–∫–∞
      }
// === –ö–æ—à–∫–∞ üêà‚Äç‚¨õ ===
const catWidget = document.getElementById("cat-widget");
const contactFormContainer = document.getElementById("contact-form-container");
const contactForm = document.getElementById("contact-form");
const closeContact = document.getElementById("close-contact");

catWidget?.addEventListener("click", () => {
  contactFormContainer.style.display =
    contactFormContainer.style.display === "block" ? "none" : "block";
});

closeContact?.addEventListener("click", () => {
  contactFormContainer.style.display = "none";
});

contactForm?.addEventListener("submit", async (e) => {
  e.preventDefault();
  const email = document.getElementById("contact-email").value.trim();
  const message = document.getElementById("contact-message").value.trim();
  if (!email || !message) return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");

  try {
    const res = await fetch(`${API_URL}/contact`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, message }),
    });
    const data = await res.json();
    alert(data.success ? "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" : "–û—à–∏–±–∫–∞: " + data.error);
    if (data.success) contactFormContainer.style.display = "none";
  } catch {
    alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
  }
});

// === –õ–µ—Ç—É—á–∞—è –º—ã—à—å ü¶á ===
const bat = document.getElementById("flying-bat");
const batMessage = document.getElementById("bat-message");

bat?.addEventListener("click", async () => {
  try {
    const res = await fetch(`${API_URL}/messages/bat`);
    const data = await res.json();
    batMessage.textContent = data.message || "ü¶á –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π";
    batMessage.style.display = "block";
    setTimeout(() => (batMessage.style.display = "none"), 4000);
  } catch {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º—ã—à–∏");
  }
});

// === –ì–∞–ª–µ—Ä–µ—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ ===
const imagesGallery = [
  { id: 1, src: "images/pic1.jpg", title: "–¢—ë–º–Ω—ã–π –ª–µ—Å", desc: "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ç—å–º–∞ –∏ —Å–≤–µ—Ç –ª—É–Ω—ã." },
  { id: 2, src: "images/pic2.jpg", title: "–ö–æ—Å–º–æ—Å", desc: "–ù–µ–æ–Ω–æ–≤–∞—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞ üåå" },
  { id: 3, src: "images/pic3.jpg", title: "–í–µ–¥—å–º–∞", desc: "–°–∏–ª—É—ç—Ç—ã –º–∞–≥–∏–∏ –≤ –Ω–æ—á–∏." },
  { id: 4, src: "images/pic4.jpg", title: "–ó–∞–º–æ–∫", desc: "–î—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã –Ω–∞ —É—Ç—ë—Å–µ." }
];

async function loadImagesGallery() {
  const container = document.getElementById("images-gallery");
  if (!container) return;

  container.innerHTML = imagesGallery.map(img => `
    <div class="card" data-id="${img.id}">
      <img src="${img.src}" alt="${img.title}">
      <h3>${img.title}</h3>
      <p>${img.desc}</p>
      <button class="meow-btn">üêæ –ú—è—É–∫</button>
      <span class="like-count">0</span>
    </div>
  `).join("");

  for (const fileCard of container.querySelectorAll(".card")) {
    const fileId = fileCard.dataset.id;
    const likeCount = fileCard.querySelector(".like-count");
    const btn = fileCard.querySelector(".meow-btn");

    try {
      const res = await fetch(`${API_URL}/files/${fileId}/likes`);
      const data = await res.json();
      likeCount.textContent = data.total || 0;

      const checkRes = await fetch(`${API_URL}/files/${fileId}/liked`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      });
      if (checkRes.ok) {
        const checkData = await checkRes.json();
        if (checkData.liked) {
          btn.textContent = "üëçüèª –ú—è—É–∫";
        }
      }
    } catch {
      likeCount.textContent = "‚ö†";
    }

    btn.addEventListener("click", async () => {
      try {
        const res = await fetch(`${API_URL}/files/${fileId}/like`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        const data = await res.json();

        if (data.success) {
          const res2 = await fetch(`${API_URL}/files/${fileId}/likes`);
          const countData = await res2.json();
          likeCount.textContent = countData.total;
          btn.textContent = data.liked ? "üëçüèª –ú—è—É–∫" : "üêæ –ú—è—É–∫";
        } else {
          alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫"));
        }
      } catch {
        alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    });
  }
}

document.addEventListener("DOMContentLoaded", loadImagesGallery);
// === PayPal –î–æ–Ω–∞—Ç ===
document.addEventListener("DOMContentLoaded", () => {
  const donateBtn = document.getElementById("donate-btn");
  if (donateBtn) {
    donateBtn.addEventListener("click", () => {
      alert("üîÆ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ PayPal...");
      window.location.href = `${API_URL}/paypal/donate`;
    });
  }
});

// === –ó–∞—â–∏—Ç–∞ –≥–æ—Å—Ç–µ–π –≤ —á–∞—Ç–µ ===
document.addEventListener("DOMContentLoaded", () => {
  const chatInput = document.getElementById("chat-input");
  const chatForm = document.getElementById("chat-form");

  if (!localStorage.getItem("token")) {
    if (chatInput) chatInput.disabled = true;
    if (chatForm) {
      const submitBtn = chatForm.querySelector("button[type=submit]");
      if (submitBtn) submitBtn.disabled = true;
    }
    if (chatInput) chatInput.placeholder = "–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è";
  }
});

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ ===
document.addEventListener("DOMContentLoaded", () => {
  alert("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  (async () => {
    try {
      const res = await fetch(`${API_URL}/messages/cat`);
      if (res.ok) {
        const data = await res.json();
        console.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:", data);
      } else {
        console.warn("‚ö† –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –æ—à–∏–±–∫–æ–π:", res.status);
        alert("‚ö† –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–≤–µ—Ä—å Render.");
      }
    } catch (err) {
      console.warn("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–µ–∫–µ–Ω–¥–æ–º:", err);
      alert("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–µ–∫–µ–Ω–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å Render.");
    }
  })();
});

// === –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π ===
document.addEventListener("DOMContentLoaded", () => {
  initAuth();        // –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  initStickers();    // —Å—Ç–∏–∫–µ—Ä—ã
  initCatAndBat();   // –∫–æ—à–∫–∞ –∏ –ª–µ—Ç—É—á–∞—è –º—ã—à—å
  loadImagesGallery(); // –≥–∞–ª–µ—Ä–µ—è
  loadChat();        // —á–∞—Ç
});
