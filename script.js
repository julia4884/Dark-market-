// === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API ===
const API_URL = "https://dark-market-backend.onrender.com"; // –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –±–µ–∫–µ–Ω–¥ –Ω–∞ Render

document.addEventListener("DOMContentLoaded", () => {
  alert("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});
// –ü—Ä–æ–≤–µ—Ä–∫–∞ API
fetch(`${API_URL}/messages/cat`)
  .then(res => res.json())
  .then(data => console.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:", data))
  .catch(() => alert("‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–µ–∫–µ–Ω–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å Render."));
  // === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
  const loginBtn = document.getElementById("login-btn");
  const registerBtn = document.getElementById("register-btn");
  const logoutBtn = document.getElementById("logout-btn");

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö id –±–µ–∑ –ª–æ–º–∫–∏ —Å—Ç–∞—Ä—ã—Ö
  function getById(...ids) {
    for (let id of ids) {
      const el = document.getElementById(id);
      if (el) return el;
    }
    return null;
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—è–º –≤–≤–æ–¥–∞
  const chatInput   = getById("chat-input-main", "chat-input");
  const chatSendBtn = getById("chat-send-main", "chat-send");
  const stickerPanel = getById("sticker-panel-main", "sticker-panel");
  const stickerPanelOwl = getById("sticker-panel-owl", "sticker-panel");
  const stickerToggle = getById("sticker-toggle");

  console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:");
  console.log("chatInput:", chatInput);
  console.log("chatSendBtn:", chatSendBtn);
  console.log("stickerPanel:", stickerPanel);
  console.log("stickerToggle:", stickerToggle);

  if (logoutBtn) {
    logoutBtn.addEventListener("click", logout);
  }

  updateUI();
});

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let token = localStorage.getItem("token");
let role = localStorage.getItem("role");

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
async function updateUI() {
  const authSection = document.getElementById("auth-section");
  const logoutSection = document.getElementById("logout-section");

  if (token) {
    if (authSection) authSection.style.display = "none";
    if (logoutSection) logoutSection.style.display = "block";

    try {
      const res = await fetch(`${API_URL}/profile`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await res.json();

      if (!data || data.error) {
        logout();
        return;
      }

      role = data.role;
      localStorage.setItem("role", role);

      const profileInfo = document.getElementById("profile-info");
      if (profileInfo) {
        let badge = "";
        if (role === "admin") badge = "üëë";
        else if (role === "developer") badge = "üíé";

        profileInfo.innerHTML = `
          <div>
            <img src="${data.avatar}" alt="avatar" class="avatar">
            <p><strong>${data.username}</strong> ${badge}</p>
            <p>${data.about || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}</p>
            ${
              role === "admin"
                ? '<a href="admin.html" class="admin-btn">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É</a>'
                : role === "developer"
                ? '<a href="developer.html" class="admin-btn">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üíé</a>'
                : '<a href="cabinet.html" class="user-btn">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>'
            }
          </div>
        `;
      }
    } catch {
      logout();
    }
  } else {
    if (authSection) authSection.style.display = "block";
    if (logoutSection) logoutSection.style.display = "none";
  }
}

// === –í—ã—Ö–æ–¥ ===
function logout() {
  localStorage.removeItem("token");
  localStorage.removeItem("role");
  localStorage.removeItem("email");
  token = null;
  role = null;
  const authSection = document.getElementById("auth-section");
  const logoutSection = document.getElementById("logout-section");
  if (authSection) authSection.style.display = "block";
  if (logoutSection) logoutSection.style.display = "none";
}

// === –í—Ö–æ–¥ ===
document.getElementById("login-btn")?.addEventListener("click", (e) => {
  e.preventDefault();
  const email = document.getElementById("login-email").value.trim();
  const password = document.getElementById("login-password").value.trim();
  if (!email || !password) return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");

  fetch(`${API_URL}/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  })
    .then((res) => res.json())
    .then(async (data) => {
      if (data.token) {
        localStorage.setItem("token", data.token);
        localStorage.setItem("role", data.role);
        localStorage.setItem("email", email);
        token = data.token;
        role = data.role;

        await updateUI();

        if (role === "admin") {
          alert("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëë");
          window.location.href = "admin.html";
        } else if (role === "developer") {
          alert("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üíé");
          window.location.href = "developer.html";
        } else {
          alert("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
          window.location.href = "cabinet.html";
        }
      } else {
        alert("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + (data.error || "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"));
      }
    })
    .catch(() => alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
});

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
document.getElementById("register-btn")?.addEventListener("click", (e) => {
  e.preventDefault();
  const username = document.getElementById("register-username").value.trim();
  const email = document.getElementById("register-email").value.trim();
  const password = document.getElementById("register-password").value.trim();
  if (!username || !email || !password) return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");

  fetch(`${API_URL}/register`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ username, email, password }),
  })
    .then((res) => res.json())
    .then((data) => {
      if (data.success) {
        alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ.");
      } else {
        alert("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + (data.error || "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"));
      }
    })
    .catch(() => alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
});
// === –ß–∞—Ç ===
let currentChat = "global";

async function loadChat() {
  if (!token) return;

  try {
    const res = await fetch(`${API_URL}/chat/${currentChat}`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const data = await res.json();
    const messagesDiv = document.getElementById("chat-messages");

    if (messagesDiv) {
      messagesDiv.innerHTML = data
        .map(
          (msg) => `
          <div class="chat-msg">
            <strong>${msg.username}</strong>: ${msg.content}
          </div>
        `
        )
        .join("");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:", err);
  }
}

document.querySelectorAll(".chat-tab").forEach((tab) => {
  tab.addEventListener("click", () => {
    document.querySelectorAll(".chat-tab").forEach((t) =>
      t.classList.remove("active")
    );
    tab.classList.add("active");
    currentChat = tab.dataset.tab;
    loadChat();
  });
});

document.getElementById("chat-form")?.addEventListener("submit", async (e) => {
  e.preventDefault();
  if (!token) return alert("–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç");

  const input = document.getElementById("chat-input");
  const content = input.value.trim();
  if (!content) return;

  try {
    await fetch(`${API_URL}/chat/${currentChat}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ content }),
    });
    input.value = "";
    loadChat();
  } catch {
    alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
});

// === –°—Ç–∏–∫–µ—Ä—ã ===
async function loadStickers() {
  try {
    const res = await fetch(`${API_URL}/stickers`);
    const stickers = await res.json();
    const panel = document.getElementById("sticker-panel");
    if (!panel) return;

    panel.innerHTML = stickers
      .map(
        (sticker) => `
      <img src="${API_URL}${sticker.url}" alt="sticker" class="sticker-img">
    `
      )
      .join("");

    document.querySelectorAll(".sticker-img").forEach((img) => {
      img.addEventListener("click", async () => {
        if (!token) return alert("–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã");
        const stickerTag = `<img src="${img.src}" class="chat-sticker">`;

        try {
          await fetch(`${API_URL}/chat/${currentChat}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ content: stickerTag }),
          });
          loadChat();
        } catch {
          alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞");
        }
      });
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:", err);
  }
}
loadStickers();

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
setInterval(loadChat, 5000);
loadChat();

// === –ö–æ—à–∫–∞ üêà‚Äç‚¨õ ===
const catWidget = document.getElementById("cat-widget");
const contactFormContainer = document.getElementById("contact-form-container");
const contactForm = document.getElementById("contact-form");
const closeContact = document.getElementById("close-contact");

catWidget?.addEventListener("click", () => {
  if (!contactFormContainer) return;
  contactFormContainer.style.display =
    contactFormContainer.style.display === "block" ? "none" : "block";
});

closeContact?.addEventListener("click", () => {
  if (contactFormContainer) contactFormContainer.style.display = "none";
});

contactForm?.addEventListener("submit", (e) => {
  e.preventDefault();
  const email = document.getElementById("contact-email").value.trim();
  const message = document.getElementById("contact-message").value.trim();
  if (!email || !message) return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");

  fetch(`${API_URL}/contact`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, message }),
  })
    .then((res) => res.json())
    .then((data) => {
      alert(data.success ? "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" : "–û—à–∏–±–∫–∞: " + data.error);
      if (data.success) contactFormContainer.style.display = "none";
    })
    .catch(() => alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
});

// === –ì–∞–ª–µ—Ä–µ—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ ===
const imagesGallery = [
  { id: 1, src: "images/pic1.jpg", title: "–¢—ë–º–Ω—ã–π –ª–µ—Å", desc: "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ç—å–º–∞ –∏ —Å–≤–µ—Ç –ª—É–Ω—ã." },
  { id: 2, src: "images/pic2.jpg", title: "–ö–æ—Å–º–æ—Å", desc: "–ù–µ–æ–Ω–æ–≤–∞—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞ üåå" },
  { id: 3, src: "images/pic3.jpg", title: "–í–µ–¥—å–º–∞", desc: "–°–∏–ª—É—ç—Ç—ã –º–∞–≥–∏–∏ –≤ –Ω–æ—á–∏." },
  { id: 4, src: "images/pic4.jpg", title: "–ó–∞–º–æ–∫", desc: "–î—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã –Ω–∞ —É—Ç—ë—Å–µ." }
];

async function loadImagesGallery() {
  const container = document.getElementById("images-gallery");
  if (!container) return;

  container.innerHTML = imagesGallery.map(img => `
    <div class="card" data-id="${img.id}">
      <img src="${img.src}" alt="${img.title}">
      <h3>${img.title}</h3>
      <p>${img.desc}</p>
      <button class="meow-btn">üêæ –ú—è—É–∫</button>
      <span class="like-count">0</span>
    </div>
  `).join("");

  for (const fileCard of container.querySelectorAll(".card")) {
    const fileId = fileCard.dataset.id;
    const likeCount = fileCard.querySelector(".like-count");
    const btn = fileCard.querySelector(".meow-btn");

    try {
      const res = await fetch(`${API_URL}/files/${fileId}/likes`);
      const data = await res.json();
      likeCount.textContent = data.total || 0;

      btn.addEventListener("click", async () => {
        try {
          const res = await fetch(`${API_URL}/files/${fileId}/like`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
          });
          const data = await res.json();

          if (data.success) {
            const res2 = await fetch(`${API_URL}/files/${fileId}/likes`);
            const countData = await res2.json();
            likeCount.textContent = countData.total;

            btn.textContent = data.liked ? "üëçüèª –ú—è—É–∫" : "üêæ –ú—è—É–∫";
          } else {
            alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫"));
          }
        } catch {
          alert("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }
      });
    } catch {
      likeCount.textContent = "‚ö†";
    }
  }
}

// === –ó–∞–ø—É—Å–∫ ===
document.addEventListener("DOMContentLoaded", () => {
  updateUI();
  loadImagesGallery();
});
